package network

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// EffectiveVirtualNetworksClient is the network Client
type EffectiveVirtualNetworksClient struct {
	BaseClient
}

// NewEffectiveVirtualNetworksClient creates an instance of the EffectiveVirtualNetworksClient client.
func NewEffectiveVirtualNetworksClient(subscriptionID string) EffectiveVirtualNetworksClient {
	return NewEffectiveVirtualNetworksClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewEffectiveVirtualNetworksClientWithBaseURI creates an instance of the EffectiveVirtualNetworksClient client using
// a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
func NewEffectiveVirtualNetworksClientWithBaseURI(baseURI string, subscriptionID string) EffectiveVirtualNetworksClient {
	return EffectiveVirtualNetworksClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// ListByNetworkGroup lists all effective virtual networks by specified network group.
// Parameters:
// resourceGroupName - the name of the resource group.
// networkManagerName - the name of the network manager.
// networkGroupName - the name of the network group to get.
// top - an optional query parameter which specifies the maximum number of records to be returned by the
// server.
// skipToken - skipToken is only used if a previous operation returned a partial result. If a previous response
// contains a nextLink element, the value of the nextLink element will include a skipToken parameter that
// specifies a starting point to use for subsequent calls.
func (client EffectiveVirtualNetworksClient) ListByNetworkGroup(ctx context.Context, resourceGroupName string, networkManagerName string, networkGroupName string, top *int32, skipToken string) (result EffectiveVirtualNetworksListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EffectiveVirtualNetworksClient.ListByNetworkGroup")
		defer func() {
			sc := -1
			if result.evnlr.Response.Response != nil {
				sc = result.evnlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: top,
			Constraints: []validation.Constraint{{Target: "top", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "top", Name: validation.InclusiveMaximum, Rule: int64(20), Chain: nil},
					{Target: "top", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("network.EffectiveVirtualNetworksClient", "ListByNetworkGroup", err.Error())
	}

	result.fn = client.listByNetworkGroupNextResults
	req, err := client.ListByNetworkGroupPreparer(ctx, resourceGroupName, networkManagerName, networkGroupName, top, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkGroup", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByNetworkGroupSender(req)
	if err != nil {
		result.evnlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkGroup", resp, "Failure sending request")
		return
	}

	result.evnlr, err = client.ListByNetworkGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkGroup", resp, "Failure responding to request")
		return
	}
	if result.evnlr.hasNextLink() && result.evnlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByNetworkGroupPreparer prepares the ListByNetworkGroup request.
func (client EffectiveVirtualNetworksClient) ListByNetworkGroupPreparer(ctx context.Context, resourceGroupName string, networkManagerName string, networkGroupName string, top *int32, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"networkGroupName":   autorest.Encode("path", networkGroupName),
		"networkManagerName": autorest.Encode("path", networkManagerName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/networkGroups/{networkGroupName}/listEffectiveVirtualNetworks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByNetworkGroupSender sends the ListByNetworkGroup request. The method will close the
// http.Response Body if it receives an error.
func (client EffectiveVirtualNetworksClient) ListByNetworkGroupSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByNetworkGroupResponder handles the response to the ListByNetworkGroup request. The method always
// closes the http.Response Body.
func (client EffectiveVirtualNetworksClient) ListByNetworkGroupResponder(resp *http.Response) (result EffectiveVirtualNetworksListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByNetworkGroupNextResults retrieves the next set of results, if any.
func (client EffectiveVirtualNetworksClient) listByNetworkGroupNextResults(ctx context.Context, lastResults EffectiveVirtualNetworksListResult) (result EffectiveVirtualNetworksListResult, err error) {
	req, err := lastResults.effectiveVirtualNetworksListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkGroupNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByNetworkGroupSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkGroupNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByNetworkGroupResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkGroupNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByNetworkGroupComplete enumerates all values, automatically crossing page boundaries as required.
func (client EffectiveVirtualNetworksClient) ListByNetworkGroupComplete(ctx context.Context, resourceGroupName string, networkManagerName string, networkGroupName string, top *int32, skipToken string) (result EffectiveVirtualNetworksListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EffectiveVirtualNetworksClient.ListByNetworkGroup")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByNetworkGroup(ctx, resourceGroupName, networkManagerName, networkGroupName, top, skipToken)
	return
}

// ListByNetworkManager list effective virtual networks in a network manager.
// Parameters:
// resourceGroupName - the name of the resource group.
// networkManagerName - the name of the network manager.
// top - an optional query parameter which specifies the maximum number of records to be returned by the
// server.
// skipToken - skipToken is only used if a previous operation returned a partial result. If a previous response
// contains a nextLink element, the value of the nextLink element will include a skipToken parameter that
// specifies a starting point to use for subsequent calls.
// parameters - effective Virtual Networks Parameter.
func (client EffectiveVirtualNetworksClient) ListByNetworkManager(ctx context.Context, resourceGroupName string, networkManagerName string, top *int32, skipToken string, parameters *EffectiveVirtualNetworksParameter) (result EffectiveVirtualNetworksListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EffectiveVirtualNetworksClient.ListByNetworkManager")
		defer func() {
			sc := -1
			if result.evnlr.Response.Response != nil {
				sc = result.evnlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: top,
			Constraints: []validation.Constraint{{Target: "top", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "top", Name: validation.InclusiveMaximum, Rule: int64(20), Chain: nil},
					{Target: "top", Name: validation.InclusiveMinimum, Rule: int64(1), Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("network.EffectiveVirtualNetworksClient", "ListByNetworkManager", err.Error())
	}

	result.fn = client.listByNetworkManagerNextResults
	req, err := client.ListByNetworkManagerPreparer(ctx, resourceGroupName, networkManagerName, top, skipToken, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkManager", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByNetworkManagerSender(req)
	if err != nil {
		result.evnlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkManager", resp, "Failure sending request")
		return
	}

	result.evnlr, err = client.ListByNetworkManagerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "ListByNetworkManager", resp, "Failure responding to request")
		return
	}
	if result.evnlr.hasNextLink() && result.evnlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListByNetworkManagerPreparer prepares the ListByNetworkManager request.
func (client EffectiveVirtualNetworksClient) ListByNetworkManagerPreparer(ctx context.Context, resourceGroupName string, networkManagerName string, top *int32, skipToken string, parameters *EffectiveVirtualNetworksParameter) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"networkManagerName": autorest.Encode("path", networkManagerName),
		"resourceGroupName":  autorest.Encode("path", resourceGroupName),
		"subscriptionId":     autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if top != nil {
		queryParameters["$top"] = autorest.Encode("query", *top)
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/listEffectiveVirtualNetworks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	if parameters != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(parameters))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByNetworkManagerSender sends the ListByNetworkManager request. The method will close the
// http.Response Body if it receives an error.
func (client EffectiveVirtualNetworksClient) ListByNetworkManagerSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByNetworkManagerResponder handles the response to the ListByNetworkManager request. The method always
// closes the http.Response Body.
func (client EffectiveVirtualNetworksClient) ListByNetworkManagerResponder(resp *http.Response) (result EffectiveVirtualNetworksListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByNetworkManagerNextResults retrieves the next set of results, if any.
func (client EffectiveVirtualNetworksClient) listByNetworkManagerNextResults(ctx context.Context, lastResults EffectiveVirtualNetworksListResult) (result EffectiveVirtualNetworksListResult, err error) {
	req, err := lastResults.effectiveVirtualNetworksListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkManagerNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByNetworkManagerSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkManagerNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByNetworkManagerResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "network.EffectiveVirtualNetworksClient", "listByNetworkManagerNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByNetworkManagerComplete enumerates all values, automatically crossing page boundaries as required.
func (client EffectiveVirtualNetworksClient) ListByNetworkManagerComplete(ctx context.Context, resourceGroupName string, networkManagerName string, top *int32, skipToken string, parameters *EffectiveVirtualNetworksParameter) (result EffectiveVirtualNetworksListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EffectiveVirtualNetworksClient.ListByNetworkManager")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByNetworkManager(ctx, resourceGroupName, networkManagerName, top, skipToken, parameters)
	return
}
